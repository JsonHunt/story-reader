// Generated by CoffeeScript 1.9.2
(function() {
  var S, StoryService, fileService, storage,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  storage = require('./storage-service');

  fileService = require('./file-service');

  S = require('string');

  StoryService = (function() {
    StoryService.prototype.punctuation = ['(', ')', ',', '...', '!', '?', ';', '.', ':', '"'];

    function StoryService() {
      this.savePage = bind(this.savePage, this);
      this.removePage = bind(this.removePage, this);
      this.addPage = bind(this.addPage, this);
      this.getPages = bind(this.getPages, this);
      this.selectStory = bind(this.selectStory, this);
      this.removeStory = bind(this.removeStory, this);
      this.newStory = bind(this.newStory, this);
      this.resetStories = bind(this.resetStories, this);
      this.getStories = bind(this.getStories, this);
      this.getWords = bind(this.getWords, this);
      this.stories = storage.loadArray('stories');
      this.words = storage.load('words');
      console.log(JSON.stringify(this.words, null, 2));
    }

    StoryService.prototype.initialize = function(http) {
      return this.http = htt;
    };

    StoryService.prototype.getWords = function() {
      return this.words;
    };

    StoryService.prototype.getStories = function() {
      return this.stories;
    };

    StoryService.prototype.resetStories = function() {
      this.stories = [];
      return storage.save(this.stories);
    };

    StoryService.prototype.newStory = function(title, imageURL) {
      var story;
      story = {
        id: storage.getNextID(),
        title: title,
        imageURL: imageURL
      };
      this.stories.push(story);
      storage.save('stories', this.stories);
      this.selectStory(story.id);
      this.addPage(title, imageURL);
      return story;
    };

    StoryService.prototype.removeStory = function(story) {
      _.remove(this.stories, function(s) {
        return s.id === story.id;
      });
      return storage.save('stories', this.stories);
    };

    StoryService.prototype.selectStory = function(storyID) {
      this.pagesKey = "story-pages-" + storyID;
      this.pages = storage.loadArray(this.pagesKey);
      return this.story = _.find(this.stories, function(s) {
        return s.id === storyID;
      });
    };

    StoryService.prototype.getPages = function() {
      return this.pages;
    };

    StoryService.prototype.addPage = function(text, imageURL) {
      var page;
      if (this.story === void 0) {
        console.log("Cannot add page. Story not selected");
        return;
      }
      page = {
        id: storage.getNextID(),
        text: text,
        imageURL: imageURL
      };
      this.pages.push(page);
      return this.savePage(page);
    };

    StoryService.prototype.removePage = function(pageID) {
      if (pageID === this.pages[0].id) {
        return;
      }
      _.remove(this.pages, function(p) {
        return p.id === pageID;
      });
      return storage.save(this.pagesKey, this.pages);
    };

    StoryService.prototype.savePage = function(page) {
      var i, len, p, ref, text;
      ref = this.punctuation;
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        text = S(page.text).replaceAll(p, " " + p + " ").s;
      }
      page.text = S(text).collapseWhitespace().s;
      page.words = text.split(" ");
      storage.save(this.pagesKey, this.pages);
      if (this.pages[0].id === page.id) {
        this.story.title = page.text;
        this.story.imageURL = page.localImageURL;
        storage.save('stories', this.stories);
      }
      console.log(JSON.stringify(this.words, null, 2));
      return async.eachSeries(page.words, (function(_this) {
        return function(word, next) {
          var filename, url, w;
          w = storage.load("word-" + word);
          if (w.text === void 0) {
            w.text = word;
            storage.save("word-" + word, w);
          }
          if (!_.contains(_this.punctuation, word) && w.audioURL === void 0) {
            url = "http://translate.google.com/translate_tts?tl=en&q=" + word;
            filename = "words/" + word + ".mp3";
            return fileService.downloadFile(url, filename, function(path) {
              w.audioURL = path;
              storage.save("word-" + word, w);
              return next();
            });
          } else {
            return next();
          }
        };
      })(this), (function(_this) {
        return function(err) {
          return console.log('All words saved');
        };
      })(this));
    };

    return StoryService;

  })();

  module.exports = new StoryService();

}).call(this);
