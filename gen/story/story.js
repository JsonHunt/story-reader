// Generated by CoffeeScript 1.9.0
(function() {
  var StoryController;

  module.exports = StoryController = function($scope, $location, $routeParams, $timeout) {
    var punctuation, _base;
    console.log($routeParams.id);
    $scope.story = _.find($scope.stories, function(s) {
      return parseInt(s.id) === parseInt($routeParams.id);
    });
    console.log(JSON.stringify($scope.story));
    if ((_base = $scope.story).sentences == null) {
      _base.sentences = [];
    }
    $scope.isEnd = $scope.sentenceIndex === $scope.story.sentences.length - 1;
    $scope.isStart = true;
    $scope.capOp = window.localStorage.getItem('caps');
    $scope.recOn = $routeParams.rec;
    $scope.showOptions = $routeParams.opt;
    punctuation = [',', '...', '!', '?', ';', '.', ':', '"'];
    if ($scope.story.sentences.length > 0) {
      $scope.sentenceIndex = 0;
      $scope.sentence = $scope.story.sentences[0];
    }
    $scope.toggleCaps = function() {
      $scope.stop();
      $scope.capOn = !$scope.capOn;
      return window.localStorage.setItem('caps', $scope.capOn);
    };
    $scope.toggleRecording = function() {
      $scope.stop();
      return $scope.recOn = !$scope.recOn;
    };
    $scope.select = function(word) {
      if (_.contains(punctuation, word)) {
        return;
      }
      if (!$scope.recOn) {
        return $scope.read(word);
      } else {
        if ($scope.recording === word) {
          $scope.recordings[word.toLowerCase()] = true;
          return $scope.stop();
        } else {
          if ($scope.recording) {
            $scope.recordings[$scope.recording.toLowerCase()] = true;
          }
          return $scope.record(word);
        }
      }
    };
    $scope.record = function(word) {
      var filename;
      filename = $scope.folderPath + ("/" + word + ".mp3");
      $scope.stop();
      console.log("Recording: " + filename);
      return $timeout(function() {
        $scope.recording = word.toLowerCase();
        $scope.media = new Media(filename, function(success) {
          return $scope.$apply(function() {
            $scope.recording = void 0;
            $scope.recordings[word.toLowerCase()] = filename;
            return $scope.media.release();
          });
        }, function(error) {
          console.log(JSON.stringify(error));
          return $scope.$apply(function() {
            $scope.recording = void 0;
            return $scope.media.release();
          });
        }, function(status) {
          return console.log(JSON.stringify(status));
        });
        return $scope.media.startRecord();
      }, 100);
    };
    $scope.read = function(word) {
      var filename;
      if (!$scope.folderPath) {
        return;
      }
      $scope.stop();
      filename = $scope.folderPath + ("/" + word + ".mp3");
      console.log("Playing: " + filename);
      $scope.playing = word.toLowerCase();
      $scope.media = new Media(filename, function(success) {
        return $scope.$apply(function() {
          if ($scope.playing === word) {
            $scope.playing = void 0;
            return $scope.media.release();
          }
        });
      }, function(error) {
        console.log(JSON.stringify(error));
        return $scope.$apply(function() {
          $scope.playing = void 0;
          return $scope.media.release();
        });
      }, function(status) {
        return console.log(JSON.stringify(status));
      });
      return $scope.media.play();
    };
    $scope.prevSentence = function() {
      if (this.sentenceIndex === 0) {
        return;
      }
      $scope.stop();
      this.sentenceIndex--;
      this.sentence = this.story.sentences[this.sentenceIndex];
      this.isStart = this.sentenceIndex === 0;
      return this.isEnd = this.sentenceIndex === this.story.sentences.length - 1;
    };
    $scope.nextSentence = function() {
      if (this.sentenceIndex === this.story.sentences.length - 1) {
        return;
      }
      $scope.stop();
      this.sentenceIndex++;
      this.sentence = this.story.sentences[this.sentenceIndex];
      this.isStart = false;
      return this.isEnd = this.sentenceIndex === this.story.sentences.length - 1;
    };
    $scope.stop = function() {
      if ($scope.playing) {
        $scope.playing = void 0;
        if ($scope.media) {
          $scope.media.stop();
        }
      }
      if ($scope.recording) {
        if ($scope.media) {
          $scope.media.stopRecord();
          $scope.recording = void 0;
        }
      }
      if ($scope.media) {
        return $scope.media.release();
      }
    };
    $scope.end = function() {
      $scope.stop();
      return $location.path('/');
    };
    return $scope.edit = function() {
      $scope.stop();
      return $location.path("edit/" + $scope.story.id);
    };
  };

  StoryController.$inject = ['$scope', '$location', '$routeParams', '$timeout'];

}).call(this);
