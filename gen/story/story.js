// Generated by CoffeeScript 1.9.2
(function() {
  var StoryController, imageService, mediaService, services, storageService, storyService;

  storyService = require('./../story-service');

  mediaService = require('./../media-service');

  imageService = require('./../image-service');

  storageService = require('./../storage-service');

  module.exports = StoryController = function($scope, $rootScope, $location, $routeParams, $timeout, $http, $cordovaFile, $cordovaFileTransfer, $cordovaCamera) {
    console.log("Story ID: " + $routeParams.id);
    storyService.selectStory(parseInt($routeParams.id));
    $scope.pages = storyService.getPages();
    $scope.pageIndex = 0;
    $scope.page = $scope.pages[0];
    if ($rootScope.openInEditMode === true) {
      $scope.textEdit = true;
      $rootScope.openInEditMode = false;
      setTimeout(function() {
        return $('#pagetext').focus();
      }, 50);
    }
    $scope.isStart = function() {
      return $scope.pageIndex === 0;
    };
    $scope.isEnd = function() {
      return $scope.pageIndex + 1 >= $scope.pages.length;
    };
    $scope.stopMedia = function() {
      return mediaService.stop();
    };
    $scope.nextPage = function() {
      mediaService.stop();
      if (!this.isEnd()) {
        $scope.pageIndex++;
        return $scope.page = $scope.pages[$scope.pageIndex];
      }
    };
    $scope.prevPage = function() {
      mediaService.stop();
      if (!this.isStart()) {
        $scope.pageIndex--;
        return $scope.page = $scope.pages[$scope.pageIndex];
      }
    };
    $scope.home = function() {
      return $scope.goto('');
    };
    $scope.toggleOptions = function() {
      mediaService.stop();
      return $scope.options = !$scope.options;
    };
    $scope.toggleEditPageText = function() {
      $scope.textEdit = !$scope.textEdit;
      if ($scope.textEdit) {
        return setTimeout(function() {
          return $('#pagetext').focus();
        }, 50);
      }
    };
    $scope.toggleEditMode = function() {
      if ($scope.mode === 'edit') {
        return $scope.mode = 'read';
      } else {
        return $scope.mode = 'edit';
      }
    };
    $scope.deletePage = function() {
      if ($scope.pages.length === 1) {
        return;
      }
      storyService.removePage($scope.page.id);
      $scope.confirmDeletePage = false;
      if ($scope.pageIndex >= $scope.pages.length) {
        $scope.pageIndex--;
      }
      return $scope.page = $scope.pages[$scope.pageIndex];
    };
    $scope.addPage = function() {
      var pageNumber;
      pageNumber = $scope.pages.length + 1;
      storyService.addPage("");
      $scope.textEdit = true;
      $scope.nextPage();
      return setTimeout(function() {
        return $('#pagetext').focus();
      }, 50);
    };
    $scope.savePage = function() {
      storyService.savePage($scope.page);
      console.log("Page saved");
      return $scope.textEdit = false;
    };
    $scope.googleImage = function() {
      $scope.imageSearch = true;
      if ($scope.editWord) {
        $scope.imageQuery = $scope.editWord.text;
        return imageService.findImagesFor($scope.imageQuery, function(error, results) {
          return $scope.searchResults = results;
        });
      } else {
        $scope.imageQuery = $scope.page.text;
        return imageService.findImagesFor($scope.imageQuery, function(error, results) {
          return $scope.searchResults = results;
        });
      }
    };
    $scope.refreshImageSearch = function() {
      return imageService.findImagesFor($scope.imageQuery, function(error, results) {
        return $scope.searchResults = results;
      });
    };
    $scope.selectImage = function(img) {
      $scope.imageSearch = false;
      if ($scope.editWord) {
        $scope.editWord.imageURL = img;
        return imageService.saveImage(img.link, "word-" + $scope.editWord.text + ".jpg", function(localURL) {
          $scope.editWord.localImageURL = localURL;
          return storageService.save("word-" + $scope.editWord.text, $scope.editWord);
        });
      } else {
        $scope.page.imageURL = img.link;
        return imageService.saveImage(img.link, "image-" + $scope.page.id + ".jpg", function(localURL) {
          $scope.page.localImageURL = localURL;
          return $scope.savePage();
        });
      }
    };
    $scope.select = function(word) {
      if (_.contains($scope.punctuation, word)) {
        return;
      }
      if (!$scope.options) {
        return $scope.read(word);
      } else {
        if ($scope.editWord && $scope.editWord.text === word) {
          return delete $scope.editWord;
        } else {
          return $scope.editWord = storageService.load("word-" + word);
        }
      }
    };
    $scope.isWordPlaying = function(w) {
      return this.reading && w.toLowerCase() === this.reading.text.toLowerCase();
    };
    $scope.read = function(word) {
      mediaService.stop();
      if (word === void 0) {
        return;
      }
      if ($scope.reading && $scope.reading.text === word) {
        return delete reading;
      } else {
        $scope.reading = storageService.load("word-" + word);
        if ($scope.reading.audioURL === void 0) {
          return;
        }
        clearTimeout($scope.readTimer);
        $scope.readTimer = setTimeout(function() {
          return $scope.$apply(function() {
            return delete $scope.reading;
          });
        }, 2000);
        return mediaService.play($scope.reading.audioURL, function() {});
      }
    };
    $scope.getWordColor = function(word) {
      if ($scope.editWord && $scope.editWord.text === word) {
        return 'green';
      }
      return 'black';
    };
    $scope.captureImage = function(callback) {
      return imageService.captureImage(function(path) {
        if ($scope.editWord) {
          $scope.editWord.localImageURL = path;
          return storageService.save("word-" + $scope.editWord.text, $scope.editWord);
        } else {
          $scope.page.localImageURL = path;
          return $scope.savePage();
        }
      });
    };
    return $scope.deletePageImage = function() {
      delete $scope.page.localImageURL;
      return $scope.savePage();
    };
  };

  services = ['$scope', '$rootScope', '$location', '$routeParams', '$timeout', '$http'];

  if (this.isPhoneGap) {
    services.push('$cordovaFile');
    services.push('$cordovaFileTransfer');
    services.push('$cordovaCamera');
  }

  StoryController.$inject = services;

}).call(this);
