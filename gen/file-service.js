// Generated by CoffeeScript 1.9.2
(function() {
  var FileService,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FileService = (function() {
    function FileService() {
      this.downloadFile = bind(this.downloadFile, this);
      this.initialize = bind(this.initialize, this);
    }

    FileService.prototype.initialize = function(fileService, callback) {
      if (cordova === void 0) {
        return;
      }
      this.cordovaFileT = fileService;
      return window.resolveLocalFileSystemURL(cordova.file.externalDataDirectory, (function(_this) {
        return function(fileEntry) {
          _this.root = fileEntry.toURL();
          if (callback) {
            return callback();
          }
        };
      })(this));
    };

    FileService.prototype.getURL = function(filename) {
      if (!root) {
        return console.log("File service was not initialized");
      } else {
        return this.root + "/" + filename;
      }
    };

    FileService.prototype.downloadFile = function(url, filename, callback) {
      var options, targetPath, trustHosts;
      targetPath = cordova.file.externalDataDirectory + filename;
      console.log("SAVING IMAGE TO " + targetPath);
      trustHosts = true;
      options = {};
      return this.cordovaFileT.download(url, targetPath, options, trustHosts).then(function(result) {
        console.log("SAVED IMAGE TO " + targetPath);
        return callback(targetPath);
      }, function(error) {
        console.log("ERROR: " + JSON.stringify(error, null, 2));
        return callback();
      });
    };

    return FileService;

  })();

  module.exports = new FileService();

}).call(this);
